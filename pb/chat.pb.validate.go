// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/chat.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateChatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChatRequestMultiError, or nil if none found.
func (m *CreateChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := CreateChatRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessage()) < 1 {
		err := CreateChatRequestValidationError{
			field:  "Message",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetStatus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateChatRequestValidationError{
						field:  fmt.Sprintf("Status[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateChatRequestValidationError{
						field:  fmt.Sprintf("Status[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateChatRequestValidationError{
					field:  fmt.Sprintf("Status[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateChatRequestMultiError(errors)
	}

	return nil
}

// CreateChatRequestMultiError is an error wrapping multiple validation errors
// returned by CreateChatRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChatRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChatRequestMultiError) AllErrors() []error { return m }

// CreateChatRequestValidationError is the validation error returned by
// CreateChatRequest.Validate if the designated constraints aren't met.
type CreateChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChatRequestValidationError) ErrorName() string {
	return "CreateChatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChatRequestValidationError{}

// Validate checks the field values on AnyUserStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AnyUserStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnyUserStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnyUserStatusMultiError, or
// nil if none found.
func (m *AnyUserStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *AnyUserStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberId

	// no validation rules for Status

	if len(errors) > 0 {
		return AnyUserStatusMultiError(errors)
	}

	return nil
}

// AnyUserStatusMultiError is an error wrapping multiple validation errors
// returned by AnyUserStatus.ValidateAll() if the designated constraints
// aren't met.
type AnyUserStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnyUserStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnyUserStatusMultiError) AllErrors() []error { return m }

// AnyUserStatusValidationError is the validation error returned by
// AnyUserStatus.Validate if the designated constraints aren't met.
type AnyUserStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnyUserStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnyUserStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnyUserStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnyUserStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnyUserStatusValidationError) ErrorName() string { return "AnyUserStatusValidationError" }

// Error satisfies the builtin error interface
func (e AnyUserStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnyUserStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnyUserStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnyUserStatusValidationError{}

// Validate checks the field values on CreateChatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChatResponseMultiError, or nil if none found.
func (m *CreateChatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateChatResponseMultiError(errors)
	}

	return nil
}

// CreateChatResponseMultiError is an error wrapping multiple validation errors
// returned by CreateChatResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateChatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChatResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChatResponseMultiError) AllErrors() []error { return m }

// CreateChatResponseValidationError is the validation error returned by
// CreateChatResponse.Validate if the designated constraints aren't met.
type CreateChatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChatResponseValidationError) ErrorName() string {
	return "CreateChatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChatResponseValidationError{}

// Validate checks the field values on DeleteChatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChatRequestMultiError, or nil if none found.
func (m *DeleteChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := DeleteChatRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetChatId() <= 0 {
		err := DeleteChatRequestValidationError{
			field:  "ChatId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteChatRequestMultiError(errors)
	}

	return nil
}

// DeleteChatRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteChatRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChatRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChatRequestMultiError) AllErrors() []error { return m }

// DeleteChatRequestValidationError is the validation error returned by
// DeleteChatRequest.Validate if the designated constraints aren't met.
type DeleteChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChatRequestValidationError) ErrorName() string {
	return "DeleteChatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChatRequestValidationError{}

// Validate checks the field values on UpdateChatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChatRequestMultiError, or nil if none found.
func (m *UpdateChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := UpdateChatRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetChatId() <= 0 {
		err := UpdateChatRequestValidationError{
			field:  "ChatId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessage()) < 1 {
		err := UpdateChatRequestValidationError{
			field:  "Message",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateChatRequestMultiError(errors)
	}

	return nil
}

// UpdateChatRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateChatRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChatRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChatRequestMultiError) AllErrors() []error { return m }

// UpdateChatRequestValidationError is the validation error returned by
// UpdateChatRequest.Validate if the designated constraints aren't met.
type UpdateChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChatRequestValidationError) ErrorName() string {
	return "UpdateChatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChatRequestValidationError{}

// Validate checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupRequestMultiError, or nil if none found.
func (m *CreateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateGroupRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) < 1 {
		err := CreateGroupRequestValidationError{
			field:  "Desc",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateGroupRequestMultiError(errors)
	}

	return nil
}

// CreateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupRequestMultiError) AllErrors() []error { return m }

// CreateGroupRequestValidationError is the validation error returned by
// CreateGroupRequest.Validate if the designated constraints aren't met.
type CreateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupRequestValidationError) ErrorName() string {
	return "CreateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupRequestValidationError{}

// Validate checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupRequestMultiError, or nil if none found.
func (m *DeleteGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := DeleteGroupRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteGroupRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupRequestMultiError) AllErrors() []error { return m }

// DeleteGroupRequestValidationError is the validation error returned by
// DeleteGroupRequest.Validate if the designated constraints aren't met.
type DeleteGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupRequestValidationError) ErrorName() string {
	return "DeleteGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupRequestValidationError{}

// Validate checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupRequestMultiError, or nil if none found.
func (m *UpdateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := UpdateGroupRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateGroupRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) < 1 {
		err := UpdateGroupRequestValidationError{
			field:  "Desc",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupRequestMultiError) AllErrors() []error { return m }

// UpdateGroupRequestValidationError is the validation error returned by
// UpdateGroupRequest.Validate if the designated constraints aren't met.
type UpdateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupRequestValidationError) ErrorName() string {
	return "UpdateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupRequestValidationError{}

// Validate checks the field values on UpdateRoleUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleUserRequestMultiError, or nil if none found.
func (m *UpdateRoleUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMemberId() <= 0 {
		err := UpdateRoleUserRequestValidationError{
			field:  "MemberId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetGroupId() <= 0 {
		err := UpdateRoleUserRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := UpdateRoleUserRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateRoleUserRequestMultiError(errors)
	}

	return nil
}

// UpdateRoleUserRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRoleUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRoleUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleUserRequestMultiError) AllErrors() []error { return m }

// UpdateRoleUserRequestValidationError is the validation error returned by
// UpdateRoleUserRequest.Validate if the designated constraints aren't met.
type UpdateRoleUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleUserRequestValidationError) ErrorName() string {
	return "UpdateRoleUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleUserRequestValidationError{}

// Validate checks the field values on AddMemberRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMemberRequestMultiError, or nil if none found.
func (m *AddMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := AddMemberRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetListUserId() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddMemberRequestValidationError{
						field:  fmt.Sprintf("ListUserId[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddMemberRequestValidationError{
						field:  fmt.Sprintf("ListUserId[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddMemberRequestValidationError{
					field:  fmt.Sprintf("ListUserId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddMemberRequestMultiError(errors)
	}

	return nil
}

// AddMemberRequestMultiError is an error wrapping multiple validation errors
// returned by AddMemberRequest.ValidateAll() if the designated constraints
// aren't met.
type AddMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMemberRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMemberRequestMultiError) AllErrors() []error { return m }

// AddMemberRequestValidationError is the validation error returned by
// AddMemberRequest.Validate if the designated constraints aren't met.
type AddMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMemberRequestValidationError) ErrorName() string { return "AddMemberRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMemberRequestValidationError{}

// Validate checks the field values on RemoveMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveMemberRequestMultiError, or nil if none found.
func (m *RemoveMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := RemoveMemberRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetListMemberId() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RemoveMemberRequestValidationError{
						field:  fmt.Sprintf("ListMemberId[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RemoveMemberRequestValidationError{
						field:  fmt.Sprintf("ListMemberId[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RemoveMemberRequestValidationError{
					field:  fmt.Sprintf("ListMemberId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RemoveMemberRequestMultiError(errors)
	}

	return nil
}

// RemoveMemberRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveMemberRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveMemberRequestMultiError) AllErrors() []error { return m }

// RemoveMemberRequestValidationError is the validation error returned by
// RemoveMemberRequest.Validate if the designated constraints aren't met.
type RemoveMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMemberRequestValidationError) ErrorName() string {
	return "RemoveMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMemberRequestValidationError{}

// Validate checks the field values on ListUserId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserIdMultiError, or
// nil if none found.
func (m *ListUserId) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListUserIdValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListUserIdMultiError(errors)
	}

	return nil
}

// ListUserIdMultiError is an error wrapping multiple validation errors
// returned by ListUserId.ValidateAll() if the designated constraints aren't met.
type ListUserIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserIdMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserIdMultiError) AllErrors() []error { return m }

// ListUserIdValidationError is the validation error returned by
// ListUserId.Validate if the designated constraints aren't met.
type ListUserIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserIdValidationError) ErrorName() string { return "ListUserIdValidationError" }

// Error satisfies the builtin error interface
func (e ListUserIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserIdValidationError{}

// Validate checks the field values on ExitGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExitGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExitGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExitGroupRequestMultiError, or nil if none found.
func (m *ExitGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExitGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := ExitGroupRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExitGroupRequestMultiError(errors)
	}

	return nil
}

// ExitGroupRequestMultiError is an error wrapping multiple validation errors
// returned by ExitGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type ExitGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExitGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExitGroupRequestMultiError) AllErrors() []error { return m }

// ExitGroupRequestValidationError is the validation error returned by
// ExitGroupRequest.Validate if the designated constraints aren't met.
type ExitGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExitGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExitGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExitGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExitGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExitGroupRequestValidationError) ErrorName() string { return "ExitGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e ExitGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExitGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExitGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExitGroupRequestValidationError{}

// Validate checks the field values on StatusResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusResponseMultiError,
// or nil if none found.
func (m *StatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return StatusResponseMultiError(errors)
	}

	return nil
}

// StatusResponseMultiError is an error wrapping multiple validation errors
// returned by StatusResponse.ValidateAll() if the designated constraints
// aren't met.
type StatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusResponseMultiError) AllErrors() []error { return m }

// StatusResponseValidationError is the validation error returned by
// StatusResponse.Validate if the designated constraints aren't met.
type StatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusResponseValidationError) ErrorName() string { return "StatusResponseValidationError" }

// Error satisfies the builtin error interface
func (e StatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusResponseValidationError{}

// Validate checks the field values on ChatStreamingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatStreamingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatStreamingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatStreamingRequestMultiError, or nil if none found.
func (m *ChatStreamingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatStreamingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := ChatStreamingRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChatStreamingRequestMultiError(errors)
	}

	return nil
}

// ChatStreamingRequestMultiError is an error wrapping multiple validation
// errors returned by ChatStreamingRequest.ValidateAll() if the designated
// constraints aren't met.
type ChatStreamingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatStreamingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatStreamingRequestMultiError) AllErrors() []error { return m }

// ChatStreamingRequestValidationError is the validation error returned by
// ChatStreamingRequest.Validate if the designated constraints aren't met.
type ChatStreamingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatStreamingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatStreamingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatStreamingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatStreamingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatStreamingRequestValidationError) ErrorName() string {
	return "ChatStreamingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChatStreamingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatStreamingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatStreamingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatStreamingRequestValidationError{}

// Validate checks the field values on ChatStreamingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatStreamingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatStreamingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatStreamingResponseMultiError, or nil if none found.
func (m *ChatStreamingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatStreamingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Member

	// no validation rules for Username

	// no validation rules for Message

	// no validation rules for Timestamp

	// no validation rules for Action

	for idx, item := range m.GetReadStatus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatStreamingResponseValidationError{
						field:  fmt.Sprintf("ReadStatus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatStreamingResponseValidationError{
						field:  fmt.Sprintf("ReadStatus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatStreamingResponseValidationError{
					field:  fmt.Sprintf("ReadStatus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatStreamingResponseMultiError(errors)
	}

	return nil
}

// ChatStreamingResponseMultiError is an error wrapping multiple validation
// errors returned by ChatStreamingResponse.ValidateAll() if the designated
// constraints aren't met.
type ChatStreamingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatStreamingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatStreamingResponseMultiError) AllErrors() []error { return m }

// ChatStreamingResponseValidationError is the validation error returned by
// ChatStreamingResponse.Validate if the designated constraints aren't met.
type ChatStreamingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatStreamingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatStreamingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatStreamingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatStreamingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatStreamingResponseValidationError) ErrorName() string {
	return "ChatStreamingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatStreamingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatStreamingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatStreamingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatStreamingResponseValidationError{}

// Validate checks the field values on StatusStreamingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StatusStreamingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusStreamingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatusStreamingRequestMultiError, or nil if none found.
func (m *StatusStreamingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusStreamingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := StatusStreamingRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StatusStreamingRequestMultiError(errors)
	}

	return nil
}

// StatusStreamingRequestMultiError is an error wrapping multiple validation
// errors returned by StatusStreamingRequest.ValidateAll() if the designated
// constraints aren't met.
type StatusStreamingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusStreamingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusStreamingRequestMultiError) AllErrors() []error { return m }

// StatusStreamingRequestValidationError is the validation error returned by
// StatusStreamingRequest.Validate if the designated constraints aren't met.
type StatusStreamingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusStreamingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusStreamingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusStreamingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusStreamingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusStreamingRequestValidationError) ErrorName() string {
	return "StatusStreamingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StatusStreamingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusStreamingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusStreamingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusStreamingRequestValidationError{}

// Validate checks the field values on StatusStreamingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StatusStreamingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusStreamingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatusStreamingResponseMultiError, or nil if none found.
func (m *StatusStreamingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusStreamingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Member

	// no validation rules for Username

	// no validation rules for Status

	if len(errors) > 0 {
		return StatusStreamingResponseMultiError(errors)
	}

	return nil
}

// StatusStreamingResponseMultiError is an error wrapping multiple validation
// errors returned by StatusStreamingResponse.ValidateAll() if the designated
// constraints aren't met.
type StatusStreamingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusStreamingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusStreamingResponseMultiError) AllErrors() []error { return m }

// StatusStreamingResponseValidationError is the validation error returned by
// StatusStreamingResponse.Validate if the designated constraints aren't met.
type StatusStreamingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusStreamingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusStreamingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusStreamingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusStreamingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusStreamingResponseValidationError) ErrorName() string {
	return "StatusStreamingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StatusStreamingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusStreamingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusStreamingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusStreamingResponseValidationError{}

// Validate checks the field values on GetListGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListGroupResponseMultiError, or nil if none found.
func (m *GetListGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroup() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListGroupResponseValidationError{
						field:  fmt.Sprintf("Group[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListGroupResponseValidationError{
						field:  fmt.Sprintf("Group[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListGroupResponseValidationError{
					field:  fmt.Sprintf("Group[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListGroupResponseMultiError(errors)
	}

	return nil
}

// GetListGroupResponseMultiError is an error wrapping multiple validation
// errors returned by GetListGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type GetListGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListGroupResponseMultiError) AllErrors() []error { return m }

// GetListGroupResponseValidationError is the validation error returned by
// GetListGroupResponse.Validate if the designated constraints aren't met.
type GetListGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListGroupResponseValidationError) ErrorName() string {
	return "GetListGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListGroupResponseValidationError{}

// Validate checks the field values on GroupInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GroupInfoMultiError, or nil
// if none found.
func (m *GroupInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for LastMessage

	if len(errors) > 0 {
		return GroupInfoMultiError(errors)
	}

	return nil
}

// GroupInfoMultiError is an error wrapping multiple validation errors returned
// by GroupInfo.ValidateAll() if the designated constraints aren't met.
type GroupInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupInfoMultiError) AllErrors() []error { return m }

// GroupInfoValidationError is the validation error returned by
// GroupInfo.Validate if the designated constraints aren't met.
type GroupInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupInfoValidationError) ErrorName() string { return "GroupInfoValidationError" }

// Error satisfies the builtin error interface
func (e GroupInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupInfoValidationError{}
